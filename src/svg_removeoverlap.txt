=== file: __init__.py ===

```
 import sys
 
 if sys.version_info[:2] >= (3, 8):
     # TODO: Import directly (no need for conditional) when `python_requires = >= 3.8`
     from importlib.metadata import PackageNotFoundError, version  # pragma: no cover
 else:
     from importlib_metadata import PackageNotFoundError, version  # pragma: no cover
 
 try:
     # Change here if project is renamed and does not equal the package name
     dist_name = __name__
     __version__ = version(dist_name)
 except PackageNotFoundError:  # pragma: no cover
     __version__ = "unknown"
 finally:
     del version, PackageNotFoundError

```

=== file: __main__.py ===

```
 #!/usr/bin/env python3
 import fire
 from .remover import RemoveOverlapsSVG
 
 def remove_overlaps(
     input_svg,
     output_svg,
     sequential=False,
     keep_white=False,
     cairo=True,
     picofy=False,
     verbose=False,
 ):
     remover = RemoveOverlapsSVG(
         cairo=cairo, picofy=picofy, keep_white=keep_white, verbose=verbose
     )
     remover.load_svg(Path(input_svg))
     remover.remove(sequential=sequential)
     remover.save_svg(Path(output_svg))
 
 if __name__ == "__main__":
     fire.core.Display = lambda lines, out: print(*lines, file=out)
     fire.Fire(remove_overlaps)

```

=== file: remover.py ===

```
 #!/usr/bin/env python3
 import logging
 from pathlib import Path
 import sys
 from typing import List, Union
 
 import picosvg.svg
 import picosvg.svg_pathops
 from lxml import etree
 from tqdm import tqdm
 import tinycss2
 
 
 logger = logging.getLogger(__name__)
 
 from lxml import etree
 
 
 def get_css_fill(style):
     return (
         next(
             (
                 token.value[0].serialize()
                 for token in tinycss2.parse_declaration_list(style)
                 if hasattr(token, "name") and token.name == "fill"
             ),
             "",
         )
         .replace(" ", "")
         .lower()
     )
 
 
 class RemoveOverlapsSVG:
     def __init__(
         self,
         cairo: bool = True,
         picofy: bool = False,
         keep_white: bool = False,
         skip_svg_fills: List[str] = None,
         verbose: bool = False,
     ) -> None:
         self.skip_svg_fills: List[str] = skip_svg_fills or [
             "white",
             "rgb(255,255,255)",
             "rgb(100%,100%,100%)",
             "rgba(255,255,255,1)",
             "hsl(0,0%,100%)",
             "hsla(0,0%,100%,1)",
             "transparent",
             "rgba(0,0,0,0)",
             "hsla(0,0%,0%,0)",
             "#ffffff",
             "none",
         ]
         self.cairo: bool = cairo
         self.picofy: bool = picofy
         self.keep_white: bool = keep_white
         self.verbose: bool = verbose
         if verbose:
             logging.basicConfig(level=logging.INFO)
         self.svg_content: str = None
         self.pico: picosvg.svg.SVG = None
 
     def _protect_clipPaths(self, svg_bytes):
         root = etree.fromstring(svg_bytes)
         clip_paths = root.findall(".//{http://www.w3.org/2000/svg}clipPath")
         for clip_path in clip_paths:
             paths = clip_path.findall("{http://www.w3.org/2000/svg}path")
             for path in paths:
                 path.set("fill", "transparent")
         return etree.tostring(root, encoding="UTF-8", xml_declaration=True).decode(
             "utf-8"
         )
 
     def _prep_svg_cairo(self) -> str:
         from cairosvg.surface import SVGSurface
 
         self.svg_content = self._protect_clipPaths(
             SVGSurface.convert(bytestring=bytes(self.svg_content, encoding="utf-8"))
         )
 
     def save_svg(self, output_path: Union[str, Path]) -> None:
         logger.info(f"Saving {output_path}...")
         with open(output_path, "w") as output_file:
             output_file.write(self.svg_content)
 
     def load_svg(self, input_path: Union[str, Path]) -> None:
         logger.info(f"Reading {input_path}...")
         with open(input_path, "r") as svg_file:
             self.svg_content = svg_file.read()
         if self.cairo:
             self._prep_svg_cairo()
 
     def _parse_svg(self):
         logger.info("Parsing SVG...")
         self.pico = picosvg.svg.SVG.fromstring(self.svg_content)
 
     def _picofy_svg(self):
         if self.picofy:
             logger.info("Picofying SVG...")
             self.pico = self.pico.topicosvg()
             self.svg_content = self.pico.tostring(pretty_print=False)
 
     def _prep_pico(self):
         self._parse_svg()
         self._picofy_svg()
 
     def _filter_pico_shapes(self):
         shapes = []
         for shape in tqdm(
             self.pico.shapes(),
             desc="Converting paths",
             disable=not self.verbose or not sys.stdout.isatty(),
         ):
             fill = get_css_fill(shape.style) or shape.fill.replace(" ", "").lower()
             if (self.keep_white) or (fill not in self.skip_svg_fills):
                 shapes.append(shape)
         return shapes
 
     def remove_overlaps_pico(
         self,
         sequential: bool = False,
     ) -> None:
         self._prep_pico()
         shapes = self._filter_pico_shapes()
         clip_rule = "nonzero"
         clip_rules = [clip_rule] * len(shapes)
 
         if sequential:
             new_shape = shapes[0]
             for shape in tqdm(
                 shapes[1:],
                 desc="Removing overlaps",
                 disable=not self.verbose or not sys.stdout.isatty(),
             ):
                 new_shape = picosvg.svg_pathops.union(
                     [new_shape, shape], [clip_rule, clip_rule]
                 )
         else:
             logger.info("Removing overlaps...")
             new_shape = picosvg.svg_pathops.union(shapes, clip_rules)
         union_d = picosvg.svg.SVGPath.from_commands(new_shape).d
         new_root = etree.Element("svg")
         for a, v in self.pico.svg_root.attrib.items():
             new_root.set(a, v)
         new_root.set("xmlns", "http://www.w3.org/2000/svg")
         new_svg = picosvg.svg.SVG(new_root)
         new_svg.view_box = self.pico.view_box
         path_el = etree.SubElement(new_root, "path")
         path_el.set("d", union_d)
         self.pico = new_svg
         self.svg_content = self.pico.tostring(pretty_print=True)
 
     def remove(
         self,
         sequential: bool = False,
     ) -> None:
         self.remove_overlaps_pico(sequential=sequential)
 

```

 #!/usr/bin/env python3
 import logging
 from pathlib import Path
 import sys
 from typing import List, Union
 
 import picosvg.svg
 import picosvg.svg_pathops
 from lxml import etree
 from tqdm import tqdm
 import tinycss2
 
 
 logger = logging.getLogger(__name__)
 
 from lxml import etree
 
 
 def get_css_fill(style):
     return (
         next(
             (
                 token.value[0].serialize()
                 for token in tinycss2.parse_declaration_list(style)
                 if hasattr(token, "name") and token.name == "fill"
             ),
             "",
         )
         .replace(" ", "")
         .lower()
     )
 
 
 class RemoveOverlapsSVG:
     def __init__(
         self,
         cairo: bool = True,
         picofy: bool = False,
         keep_white: bool = False,
         skip_svg_fills: List[str] = None,
         verbose: bool = False,
     ) -> None:
         self.skip_svg_fills: List[str] = skip_svg_fills or [
             "white",
             "rgb(255,255,255)",
             "rgb(100%,100%,100%)",
             "rgba(255,255,255,1)",
             "hsl(0,0%,100%)",
             "hsla(0,0%,100%,1)",
             "transparent",
             "rgba(0,0,0,0)",
             "hsla(0,0%,0%,0)",
             "#ffffff",
             "none",
         ]
         self.cairo: bool = cairo
         self.picofy: bool = picofy
         self.keep_white: bool = keep_white
         self.verbose: bool = verbose
         if verbose:
             logging.basicConfig(level=logging.INFO)
         self.svg_content: str = None
         self.pico: picosvg.svg.SVG = None
 
     def _protect_clipPaths(self, svg_bytes):
         root = etree.fromstring(svg_bytes)
         clip_paths = root.findall(".//{http://www.w3.org/2000/svg}clipPath")
         for clip_path in clip_paths:
             paths = clip_path.findall("{http://www.w3.org/2000/svg}path")
             for path in paths:
                 path.set("fill", "transparent")
         return etree.tostring(root, encoding="UTF-8", xml_declaration=True).decode(
             "utf-8"
         )
 
     def _prep_svg_cairo(self) -> str:
         from cairosvg.surface import SVGSurface
 
         self.svg_content = self._protect_clipPaths(
             SVGSurface.convert(bytestring=bytes(self.svg_content, encoding="utf-8"))
         )
 
     def save_svg(self, output_path: Union[str, Path]) -> None:
         logger.info(f"Saving {output_path}...")
         with open(output_path, "w") as output_file:
             output_file.write(self.svg_content)
 
     def load_svg(self, input_path: Union[str, Path]) -> None:
         logger.info(f"Reading {input_path}...")
         with open(input_path, "r") as svg_file:
             self.svg_content = svg_file.read()
         if self.cairo:
             self._prep_svg_cairo()
 
     def _parse_svg(self):
         logger.info("Parsing SVG...")
         self.pico = picosvg.svg.SVG.fromstring(self.svg_content)
 
     def _picofy_svg(self):
         if self.picofy:
             logger.info("Picofying SVG...")
             self.pico = self.pico.topicosvg()
             self.svg_content = self.pico.tostring(pretty_print=False)
 
     def _prep_pico(self):
         self._parse_svg()
         self._picofy_svg()
 
     def _filter_pico_shapes(self):
         shapes = []
         for shape in tqdm(
             self.pico.shapes(),
             desc="Converting paths",
             disable=not self.verbose or not sys.stdout.isatty(),
         ):
             fill = get_css_fill(shape.style) or shape.fill.replace(" ", "").lower()
             if (self.keep_white) or (fill not in self.skip_svg_fills):
                 shapes.append(shape)
         return shapes
 
     def remove_overlaps_pico(
         self,
         sequential: bool = False,
     ) -> None:
         self._prep_pico()
         shapes = self._filter_pico_shapes()
         clip_rule = "nonzero"
         clip_rules = [clip_rule] * len(shapes)
 
         if sequential:
             new_shape = shapes[0]
             for shape in tqdm(
                 shapes[1:],
                 desc="Removing overlaps",
                 disable=not self.verbose or not sys.stdout.isatty(),
             ):
                 new_shape = picosvg.svg_pathops.union(
                     [new_shape, shape], [clip_rule, clip_rule]
                 )
         else:
             logger.info("Removing overlaps...")
             new_shape = picosvg.svg_pathops.union(shapes, clip_rules)
         union_d = picosvg.svg.SVGPath.from_commands(new_shape).d
         new_root = etree.Element("svg")
         for a, v in self.pico.svg_root.attrib.items():
             new_root.set(a, v)
         new_root.set("xmlns", "http://www.w3.org/2000/svg")
         new_svg = picosvg.svg.SVG(new_root)
         new_svg.view_box = self.pico.view_box
         path_el = etree.SubElement(new_root, "path")
         path_el.set("d", union_d)
         self.pico = new_svg
         self.svg_content = self.pico.tostring(pretty_print=True)
 
     def remove(
         self,
         sequential: bool = False,
     ) -> None:
         self.remove_overlaps_pico(sequential=sequential)
 

```

===

